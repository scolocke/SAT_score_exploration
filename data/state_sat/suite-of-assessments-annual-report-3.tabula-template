dt_sing_sub->Sumw2();
dt_mult_sub->Sumw2();

double scale; 
for(int i = 1; i < 1000; i++){
scale += dt_sing_sub->GetBinContent(1101 +i);
}
dt_sing_sub->Scale(1/scale)
scale
scale = 0
for(int i = 1; i < 1000; i++){
scale += dt_mult_sub->GetBinContent(1101 +i);
}
dt_mult_sub->Scale(1/scale)
dt_mult_sub->Draw()
dt_sing_sub->Draw("same")


double boundaries[101];
boundaries[0] = 0.0006
for(int i = 0; i < 100; i++){
boundaries[i+1] = boundaries[i]*(10**.05);
}
TH1D *hdt1 = new TH1D("hdt1","Spallation #Deltat;dt (s); Counts/s",100,boundaries)
t->Project("hdt1","spall_dt","vertexdiff > 0")
double width, value
for(int i = 0; i < 100; i++){
width = boundaries[i+1] - boundaries[i];
value = hdt1->GetBinContent(i+1)/width;
hdt1->SetBinContent(i+1,value);
value = hdt1->GetBinError(i+1)/width;
hdt1->SetBinError(i+1,value);
}


TH1D *hdt2 = new TH1D("hdt2","Spallation #Deltat;dt (s); Counts/s",100,boundaries)
t->Project("hdt2","spall_dt","vertexdiff > 0 && vertexdiff < 250.")
double width, value
for(int i = 0; i < 100; i++){
width = boundaries[i+1] - boundaries[i];
value = hdt2->GetBinContent(i+1)/width;
hdt2->SetBinContent(i+1,value);
value = hdt2->GetBinError(i+1)/width;
hdt2->SetBinError(i+1,value);
}
hdt2->Draw("same")

TH1D *hdtdiff = new TH1D("hdtdiff","Spallation #Deltat;dt (s); Counts/s",100,boundaries)
hdtdiff->Add(hdt1);
hdtdiff->Add(hdt2,-1);

TH1D *hdr = new TH1D("hdr","Distance to Cloud Center (dR^{3});dR^{3} (m^{3});Counts",125,0,125);
t->Project("hdr","vertexdiff**3/(100**3)","vertexdiff > 0")

TH2D *hmult = new TH2D("hmult","Spallation Multiplicty vs \"Quality\" Neutron Multiplicity",140,0,140,80,0,80);
t->Project("hmult","spall_candidates:total")


   Double_t red[9]   = { 0.2082, 0.0592, 0.0780, 0.0232, 0.1802, 0.5301, 0.8186, 0.9956, 0.9764};
   Double_t green[9] = { 0.1664, 0.3599, 0.5041, 0.6419, 0.7178, 0.7492, 0.7328, 0.7862, 0.9832};
   Double_t blue[9]  = { 0.5293, 0.8684, 0.8385, 0.7914, 0.6425, 0.4662, 0.3499, 0.1968, 0.0539};
   Double_t stops[9] = { 0.0000, 0.1250, 0.2500, 0.3750, 0.5000, 0.6250, 0.7500, 0.8750, 1.0000};
   Int_t nb=255;
   TColor::CreateGradientColorTable(9, stops, red, green, blue, nb);

ovaq_good_sub->SetContour(40)


TFile *tf = new TFile("all_spall.root")
TH1D *hdrold = new TH1D("hdrold","Distance to Cloud Center (dR^{3});dR^{3} (m^{3});Counts",125,0,125);
t->Project("hdrold","vertexdiff**3/(100**3)","vertexdiff > 0")

TH2D *hmultold = new TH2D("hmultold","Spallation Multiplicty vs \"Quality\" Neutron Multiplicity",140,0,140,80,0,80);
t->Project("hmultold","spall_candidates:total")

double par[14],pare[14];
TF1 *f1 = new TF1("f1","[0]*exp([1]*x)",.001,.1);
TF1 *f2 = new TF1("f2","[0]*exp([1]*x)",.001,.1);
TF1 *f3 = new TF1("f3","[0]*exp([1]*x)",.1,.9);
TF1 *f4 = new TF1("f4","[0]*exp([1]*x)",.9,3);
TF1 *f5 = new TF1("f5","[0]*exp([1]*x)",3,9);
TF1 *f6 = new TF1("f6","[0]*exp([1]*x)",10,30);
TF1 *f7 = new TF1("f7","[0]*exp([1]*x)",15,45);
TF1 *f8 = new TF1("f8","[0]*exp([1]*x)",.0006,.005);


TF1 *fall;

fall = new TF1("fall","[0]*exp([1]*x)+[2]*exp([3]*x)+[4]*exp([5]*x)+[6]*exp([7]*x)+[8]*exp([9]*x)+[10]*exp([11]*x)+[12]*exp([13]*x) +[14]*exp([15]*x)+ [16]",.00005,60);

f1->FixParameter(1,-1/.0159); 
f2->FixParameter(1,-1/.0289); 
f3->FixParameter(1,-1/.257); 
f4->FixParameter(1,-1/1.21);
f5->FixParameter(1,-1/3.52);
f6->FixParameter(1,-1/10.3);
f7->FixParameter(1,-1/19.9);
f8->FixParameter(1,-1/.000120);


 hdt2->Fit(f1,"REM");
 hdt2->Fit(f2,"REM");
 hdt2->Fit(f3,"REM");
 hdt2->Fit(f4,"REM");
 hdt2->Fit(f5,"REM");
 hdt2->Fit(f6,"REM");
 hdt2->Fit(f7,"REM");
 hdt2->Fit(f8,"REM");

 
 f8->GetParameters(&par[14]);
 f1->GetParameters(&par[0]);
 f2->GetParameters(&par[2]);
 f3->GetParameters(&par[4]);
 f4->GetParameters(&par[6]);
 f5->GetParameters(&par[8]);
 f6->GetParameters(&par[10]);
 f7->GetParameters(&par[12]);

 fall->SetParameters(par);

 fall->SetParName(0,"^{12}N");
 fall->SetParName(2,"^{12}B");
 fall->SetParName(4,"^{9}Li");
 fall->SetParName(6,"^{8}Li/B");
 fall->SetParName(8,"^{15}C");
 fall->SetParName(10,"^{16}N");
 fall->SetParName(12,"^{11}Be");
 fall->SetParName(14,"n-Gd");
 fall->SetParName(16,"Const");

 fall->FixParameter(1,-1/.0159);
 fall->FixParameter(3,-1/.0289);
 fall->FixParameter(5,-1/.257);
 fall->FixParameter(7,-1/1.21);
 fall->FixParameter(9,-1/3.52);
 fall->FixParameter(11,-1/10.3);
 fall->FixParameter(13,-1/19.9);
 fall->FixParameter(15,-1/.000120);

 hdt2->Fit(fall,"REM");
 hdt2->Fit(fall,"REM");
 hdt2->Fit(fall,"REM");
 hdt2->Fit(fall,"REM");





